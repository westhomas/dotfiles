#!/usr/bin/env bash

# stop on errors
set -e


# setup fancy-pants colors
__RAINBOWPALETTE="1"

function __colortext()
{
  echo -e " \e[$__RAINBOWPALETTE;$2m$1\e[0m"
}

function echogreen() 
{
  echo $(__colortext "$1" "32")
}

function echored() 
{
  echo $(__colortext "$1" "31")
}

function echoblue() 
{
  echo $(__colortext "$1" "34")
}

function echopurple() 
{
  echo $(__colortext "$1" "35")
}

function echoyellow() 
{
  echo $(__colortext "$1" "33")
}

function echocyan() 
{
  echo $(__colortext "$1" "36")
}


# cleanup and exit trapping
function cleanup {
    echo -e "\n"
    echoyellow "Exiting..."
    exit 0
}

trap 'cleanup' SIGINT SIGTERM ERR


# prepare for asking them what mode they're in
declare -a available_modes=("Developer" "Remote")

# start the prompting
echogreen "Choose only one. You must choose. But choose wisely."
PS3="Select your environment mode:"
# https://unix.stackexchange.com/questions/513466/bash-ignoring-sigint-trap-when-select-loop-is-running
set -o posix
select d in "${available_modes[@]}"; do
  echocyan "You have chosen... wisely: ${d}"
  yadm config local.class ${d}
  chosen_mode=$(yadm config local.class)
  break
done
set +o posix

# Install apt-get packages
system_type=$(uname -s)
if [[ "$system_type" = "Linux" && -r "$HOME/.requirements.apt-get" ]]; then
	echo -e ".requirements.apt-get file detected..."
	echogreen "Would you like to install these apt-get packages? (Y/n): "
	read prompt
	if [[ "${prompt}" == 'Y' || "${prompt}" == 'y' || "${prompt}" == '' ]]; then
    echoyellow "Updating apt-get bundle"
    < .requirements.apt-get xargs sudo apt-get install -y
  fi
fi

# Install homebrew if it's missing
if ! command -v brew >/dev/null 2>&1; then
  echo -e "No homebrew detected..."
  echogreen "Would you like to install homebrew? (Y/n): "
  read prompt
  if [[ "${prompt}" == 'Y' || "${prompt}" == 'y' || "${prompt}" == '' ]]; then
    echoyellow "Installing homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    # we need these available to use brew below, but their .bashrc will have it in each new shell
    eval $($HOME/.linuxbrew/bin/brew shellenv)
  fi
fi

# Install their brew packages
if [[ -r "$HOME/.Brewfile" ]]; then
  echo -e ".Brewfile detected..."
  echogreen "Would you like to install these brew packages? (Y/n): "
  read prompt
  if [[ "${prompt}" == 'Y' || "${prompt}" == 'y' || "${prompt}" == '' ]]; then
    echoyellow "Updating homebrew bundle"
    brew bundle --global
  fi
fi

# Install python pips if there's a python3
if command -v python3 >/dev/null 2>&1; then
  if [[ -r "$HOME/.requirements.pip" ]]; then
    echo -e ".requirements.pip file detected..."
    echogreen "Would you like to install these python pips? (Y/n): "
    read prompt
    if [[ "${prompt}" == 'Y' || "${prompt}" == 'y' || "${prompt}" == '' ]]; then
      echoyellow "Updating pip bundle"
      pip3 install -r "$HOME/.requirements.pip"
    fi
  fi
fi

# More bootstrapy things
if [[ "${chosen_mode}" = "Developer" ]]; then

  # Get the compose completion stuff in place
  # https://docs.docker.com/compose/completion/
  if command -v docker-compose >/dev/null 2>&1; then
    [[ ! -r "$(brew --prefix)/etc/bash_completion.d/docker-compose" ]] && curl -L https://raw.githubusercontent.com/docker/compose/1.26.2/contrib/completion/bash/docker-compose -o $(brew --prefix)/etc/bash_completion.d/docker-compose
  fi

  if command -v python3 >/dev/null 2>&1; then
    if [[ "$system_type" = "Linux" && -r /usr/bin/python ]]; then
      echo -e "Python3 detected..."
      echogreen "You have python3 installed. Would you like to remove the default system python link? (Y/n): "
      read prompt
      if [[ "${prompt}" == 'Y' || "${prompt}" == 'y' || "${prompt}" == '' ]]; then
        echoyellow "Removing default python link"
        sudo rm /usr/bin/python
      fi
    fi
  fi

elif [[ "${chosen_mode}" = "Remote" ]]; then
    echo "Currently nothing else bootstrap for Remote!"
fi

# Rewards
if command -v figlet >/dev/null 2>&1 && command -v lolcat >/dev/null 2>&1; then
  echo "Watch out." | figlet | lolcat
  echo "We got a developer over here." | figlet | lolcat
fi
echo "All done! Just restart your shell or source ~/.bashrc"